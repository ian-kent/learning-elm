var _user$project$Main$getError = function (model) {
	return (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$String$length(model.error),
		0) > 0) ? A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(model.error)
			])) : _elm_lang$html$Html$text('');
};
var _user$project$Main$decodeGifUrl = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['data', 'image_url']),
	_elm_lang$core$Json_Decode$string);
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {topic: a, gifUrl: b, error: c, paused: d};
	});
var _user$project$Main$PauseResume = {ctor: 'PauseResume'};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return model.paused ? _elm_lang$core$Platform_Sub$none : A2(_elm_lang$core$Time$every, 5 * _elm_lang$core$Time$second, _user$project$Main$Tick);
};
var _user$project$Main$UpdateTopic = function (a) {
	return {ctor: 'UpdateTopic', _0: a};
};
var _user$project$Main$FetchFail = function (a) {
	return {ctor: 'FetchFail', _0: a};
};
var _user$project$Main$FetchSucceed = function (a) {
	return {ctor: 'FetchSucceed', _0: a};
};
var _user$project$Main$getRandomGif = function (topic) {
	var url = A2(_elm_lang$core$Basics_ops['++'], 'http://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC&tag=', topic);
	return A3(
		_elm_lang$core$Task$perform,
		_user$project$Main$FetchFail,
		_user$project$Main$FetchSucceed,
		A2(_evancz$elm_http$Http$get, _user$project$Main$decodeGifUrl, url));
};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A4(_user$project$Main$Model, 'cats', 'waiting.gif', '', false),
	_1: _user$project$Main$getRandomGif('cats')
};
var _user$project$Main$MorePlease = {ctor: 'MorePlease'};
var _user$project$Main$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p0 = msg;
			switch (_p0.ctor) {
				case 'MorePlease':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{gifUrl: 'waiting.gif', paused: true}),
						_1: _user$project$Main$getRandomGif(model.topic)
					};
				case 'FetchSucceed':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{gifUrl: _p0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'FetchFail':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								error: function () {
									var _p1 = _p0._0;
									switch (_p1.ctor) {
										case 'NetworkError':
											return 'Network error';
										case 'Timeout':
											return 'Timeout';
										case 'BadResponse':
											return 'Bad response';
										default:
											return 'Unexpected payload';
									}
								}()
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'UpdateTopic':
					var _v2 = _user$project$Main$MorePlease,
						_v3 = _elm_lang$core$Native_Utils.update(
						model,
						{topic: _p0._0});
					msg = _v2;
					model = _v3;
					continue update;
				case 'PauseResume':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								paused: _elm_lang$core$Basics$not(model.paused)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				default:
					var _v4 = _user$project$Main$MorePlease,
						_v5 = model;
					msg = _v4;
					model = _v5;
					continue update;
			}
		}
	});
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$getError(model),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$select,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateTopic)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$option,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$value('cats')
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('cats')
									])),
								A2(
								_elm_lang$html$Html$option,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$value('dogs')
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('dogs')
									]))
							]))
					])),
				A2(
				_elm_lang$html$Html$img,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$src(model.gifUrl)
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Main$MorePlease)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('More Please!')
					])),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$Main$PauseResume)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						model.paused ? _elm_lang$html$Html$text('Resume') : _elm_lang$html$Html$text('Pause')
					]))
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
